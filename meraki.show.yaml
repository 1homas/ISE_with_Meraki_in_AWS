---
#------------------------------------------------------------------------------
# Shows Cisco Meraki Org, Admin, Networks, and Devices Information
#
# Requires the following environment variables:
#   export MERAKI_DASHBOARD_API_KEY='EXAMPLE+KEYc320e12ee407159487a4cabc41abb'
#
# Run with
#   ansible-playbook meraki.show.yaml
#   ansible-playbook -v meraki.show.yaml # use -v to see the intermediate results
#------------------------------------------------------------------------------

- name: Show Meraki Admins, Organizations, Networks, and Devices
  hosts: localhost
  vars_files:
    - vars/main.yaml
  gather_facts: no

  pre_tasks:
    - name: Assert Required Environment Variables
      ansible.builtin.assert:
        that: lookup('env', 'MERAKI_DASHBOARD_API_KEY')
          or lookup('env', 'EC2_REGION')
        fail_msg: ‚ùå Please set environment variable MERAKI_DASHBOARD_API_KEY

  tasks:
    - name: Get Organizations for user's authentication key
      delegate_to: localhost
      cisco.meraki.organizations_info:
        # organizationId: "{{ meraki_org_id }}"
      register: results

    - name: Show Meraki Orgs
      delegate_to: localhost
      vars:
        hide: ["url"]
        # maxw: 40
        rows: "{{ results.meraki_response }}"
        temp: "{{ lookup('template', 'templates/list_of_dicts.j2') }}"
      ansible.builtin.debug:
        msg: "{{ temp }}"

    - name: Set org_names and org_ids
      ansible.builtin.set_fact:
        org_names: "{{ results.meraki_response | community.general.json_query('[*].name') }}"
        org_ids: "{{ results.meraki_response | community.general.json_query('[*].id') }}"

    - name: Get Org Administrators
      delegate_to: localhost
      loop: "{{ org_ids }}"
      cisco.meraki.organizations_admins_info:
        organizationId: "{{ item }}"
      register: results

    # - name: Debug vars
    #   ansible.builtin.debug:
    #     msg: |
    #       results.results.meraki_response: {{ results.results | community.general.json_query('[*].meraki_response')  | first | default('UNDEFINED') }}

    - name: Show Meraki Org Admins
      delegate_to: localhost
      vars:
        hide: ["authenticationMethod"]
        maxw: 30
        rows: "{{ results.results | community.general.json_query('[*].meraki_response') | first }}"
        temp: "{{ lookup('template', 'templates/list_of_dicts.j2') }}"
      ansible.builtin.debug:
        msg: "{{ temp }}"

    - name: Get All Networks
      delegate_to: localhost
      loop: "{{ org_ids }}"
      cisco.meraki.networks_info:
        organizationId: "{{ item }}"
      register: results

    - name: Show All Networks
      delegate_to: localhost
      vars:
        hide: ["enrollmentString", "url"]
        maxw: 30
        # rows: "{{ results.meraki_response }}"
        rows: "{{ results.results | community.general.json_query('[*].meraki_response') | first }}"
        temp: "{{ lookup('template', 'templates/list_of_dicts.j2') }}"
      ansible.builtin.debug:
        msg: "{{ temp }}"

    - name: Set network_names
      ansible.builtin.set_fact:
        network_names: "{{ results.meraki_response | community.general.json_query('[*].name') }}"

    - name: Get All Devices in the Organization
      delegate_to: localhost
      loop: "{{ org_ids }}"
      cisco.meraki.devices_info:
        organizationId: "{{ item }}"
        # optional filters:
        # networkIds: []
        # productTypes: []
        # tags: []
        # perPage: 0
        # startingAfter: string
        # endingBefore: string
        # configurationUpdatedAfter: string
        # tagsFilterType: string
        # name: string
        # mac: string
        # serial: string
        # model: string
        # macs: []
        # serials: []
        # sensorMetrics: []
        # sensorAlertProfileIds: []
        # models: []
        # total_pages: -1
        # direction: next
      register: results

    - name: Show All Meraki Devices
      delegate_to: localhost
      vars:
        hide: ["address", "firmware", "lat", "lng", "notes", "url"]
        maxw: 30
        # rows: "{{ results.meraki_response }}"
        rows: "{{ results.results | community.general.json_query('[*].meraki_response') | first }}"
        temp: "{{ lookup('template', 'templates/list_of_dicts.j2') }}"
      ansible.builtin.debug:
        msg: "{{ temp }}"
