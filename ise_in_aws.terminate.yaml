---
#
# Terminate AWS EC2 Instances for a Project
#   - Terminate all EC2 instances in Project
#   - Delete Subnets
#   - Delete Route Table
#   - Delete Internet Gateway
#   - Delete Security Groups in VPC
#   - Delete VPCs
#   - Delete public_key
#   - Delete private_key.pem
#
# Run: `ansible-playbook ise_in_aws.terminate.yaml`
#


- name: Terminate AWS EC2 Instances for Project "{{ project_name }}"
  hosts: localhost
  vars_files: 
    - vars/main.yaml
  vars_prompt:
    - name: project_name
      prompt: Project Name
      default: "{{ project_name }}"
      private: no
  tasks:


  - name: Get all EC2 Instances with tag project:"{{ project_name }}"
    community.aws.ec2_instance_info:    # get all by default
      filters:
        instance-state-name: running
        "tag:project": "{{ project_name }}"
    register: instances

  # - name: Show instances
  #   ansible.builtin.debug: var=instances

  - name: Delete all EC2 instances with tag project:"{{ project_name }}"
    community.aws.ec2_instance:
      state: absent
      wait: yes
      filters:
        # instance-state-name: [ "running" ]
        "tag:project": "{{ project_name }}"


  # - name: Terminate
  #   loop: "{{instances.instances}}"
  #   amazon.aws.ec2:
  #     instance_ids: "{{item.instance_id}}"
  #     state: absent
  #     # wait: yes




  - name: Get all VPCs with tag project:"{{ project_name }}"
    amazon.aws.ec2_vpc_net_info:
      filters:
        "tag:project": "{{ project_name }}"
    register: vpcs

  # - name: Show vpcs
  #   ansible.builtin.debug: var=vpcs




  - name: Find Dangling ENIs in the VPC
    when: vpcs.vpcs is defined and vpcs.vpcs | length > 0
    amazon.aws.ec2_eni_info:
      filters:
        vpc-id: "{{ vpcs.vpcs[0].id }}"
    register: enis

  # - name: Show enis
  #   ansible.builtin.debug: var=enis

  - name: Delete all dangling ENIs
    when: enis.network_interfaces is defined and enis.network_interfaces | length > 0
    loop: '{{ enis.network_interfaces }}'
    amazon.aws.ec2_eni:
      state: absent
      eni_id: "{{ item.id }}"




  - name: Get All Subnets with tag project:"{{ project_name }}"
    amazon.aws.ec2_vpc_subnet_info:
      filters:
        "tag:project": "{{ project_name }}"
    register: subnets

  # - name: Show subnets
  #   ansible.builtin.debug: var=subnets

  - name: Delete Subnets
    loop: '{{ subnets.subnets }}'
    amazon.aws.ec2_vpc_subnet:
      vpc_id: "{{ item.vpc_id }}"
      cidr: "{{ item.cidr_block }}"
      state: absent




  - name: Get All Route Tables with tag project:"{{ project_name }}"
    community.aws.ec2_vpc_route_table_info:
      filters:
        "tag:project": "{{ project_name }}"
    register: rts

  # - name: Show rts
  #   ansible.builtin.debug: var=rts

  - name: Delete Route Table
    loop: '{{ rts.route_tables }}'
    community.aws.ec2_vpc_route_table:
      route_table_id: "{{ item.id }}"
      lookup: id
      state: absent




  # - name: Get All Internet Gateways with tag project:"{{ project_name }}"
  #   community.aws.ec2_vpc_igw_info:
  #     convert_tags: yes
  #     filters:
  #       "tag:project": "{{ project_name }}"
  #   register: igws

  # - name: Show igws
  #   ansible.builtin.debug: var=igws

  - name: Delete Internet Gateway
    loop: '{{ vpcs.vpcs }}'
    community.aws.ec2_vpc_igw:
      vpc_id: "{{ item.vpc_id }}"
      state: absent




  - name: Get all Security Groups with tag project:"{{ project_name }}"
    amazon.aws.ec2_group_info:
      filters:
        "tag:project": "{{ project_name }}"
    register: sgs

  # - name: Show sgs
  #   ansible.builtin.debug: var=sgs

  - name: Delete Security Groups in VPC
    loop: "{{ sgs.security_groups }}"
    when: item.group_name != "default"
    amazon.aws.ec2_group:
      group_id: "{{ item.group_id }}"
      state: absent




  - name: Delete VPCs with tag project:"{{ project_name }}"
    loop: "{{ vpcs.vpcs }}"
    amazon.aws.ec2_vpc_net:
      name: "{{ project_name }}"              # required
      cidr_block: "{{ item.cidr_block }}"     # required
      state: absent




  #
  # Delete the keypair from AWS!
  #
  - name: Delete {{ ssh_keypair_name }} by Name
    amazon.aws.ec2_key:
      name: "{{ ssh_keypair_name }}"
      state: absent

  #
  # Delete the local keypair
  #
  - name: Delete {{ ssh_keypair_directory }}/{{ ssh_keypair_name }}.pem
    ansible.builtin.file:
      path: "{{ ssh_keypair_directory }}/{{ ssh_keypair_name }}.pem"
      state: absent




  - name: Delete the Meraki Network
    cisco.meraki.meraki_network:
      org_name: "{{ meraki_org_name }}"
      net_name: "{{ project_name }}"
      state: absent
 

...
