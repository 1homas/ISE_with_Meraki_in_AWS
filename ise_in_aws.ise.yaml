---


  #
  # âš  Limit CIDR IPs to the Lab Network to Prevent Public Internet Access!
  #
  - name: Create SG-ISE Security Group
    amazon.aws.ec2_group:
      name: SG-ISE
      description: SG-ISE
      # vpc_id: "{{ vpcs.vpcs[0].id }}"
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      rules:
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: 172.31.0.0/16
        rule_desc: Allow all traffic within VPC
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
        rule_desc: Allow SSH from anywhere
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: 192.168.0.0/16
        rule_desc: Allow all traffic from on-premises
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0    # any
          rule_desc: Allow All
      tags:
        Name: SG-ISE
        project: "{{ project_name }}"
        # start_date: "{{ ansible_date_time.date }}"
    register: sg_ise
    tags:
    - sg
    - security_group




  - name: Create ISE 3.1 Instance in AWS
    loop: "{{ ise_nodes }}"
    amazon.aws.ec2_instance:
      state: present
      region: "{{ aws_region }}"
      vpc_subnet_id: "{{ subnet_private.subnet.id }}"
      image_id: "{{ aws_ise_ami }}"
      instance_type: "{{ item.instance_type | default( aws_ise_instance_type ) }}"
      key_name: "{{ ssh_keypair_name }}"
      network:
        assign_public_ip: yes
        delete_on_termination: yes
        private_ip_address: "{{ item.private_ip}}"
      security_group: "{{ sg_ise.group_id }}"
      volumes:
        - device_name: /dev/sda1
          ebs:
            delete_on_termination: true
            volume_size: "{{ item.volume_size | default( 300 ) }}"
      wait: yes
      tags:
        Name: "{{ item.name }}"
        product: "ISE"
        hostname: "{{ item.name }}"
        project: "{{ project_name }}"
        start_date: "{{ ansible_date_time.date }}"
        role: "{{ item.role | default( '') }}"
        personas: "{{ item.personas | default( 'standalone') }}"
      user_data: "hostname={{ item.name | lower }}\nprimarynameserver={{ ise_dns_server }}\ndnsdomain={{ domain_name }}\nntpserver={{ ise_ntp_server }}\ntimezone={{ ise_timezone }}\nusername={{ ise_username }}\npassword={{ ise_password }}"
    register: instances

  - name: Show ISE Instances
    ansible.builtin.debug: var=instances




  #
  # Advertise the same internal IP for public and private DNS
  #
  - name: Add public DNS entry for the ISE node(s)
    loop: "{{ ise_nodes }}"
    community.aws.route53:
      state: present
      zone: "{{ domain_name }}"
      record: "{{ item.name }}.{{ domain_name }}"
      overwrite: yes
      private_zone: no
      type: A
      ttl: 7200
      value: "{{ item.private_ip }}"
      wait: no

  - name: Add private DNS entry for the ISE node(s)
    loop: "{{ ise_nodes }}"
    community.aws.route53:
      state: present
      zone: "{{ domain_name }}"
      record: "{{ item.name }}.{{ domain_name }}"
      overwrite: yes
      private_zone: yes
      type: A
      ttl: 7200
      value: "{{ item.private_ip }}"
      wait: no




  - name: Show SSH Commands for ISE Instances
    loop: "{{ ise_nodes }}"
    ansible.builtin.debug:
      msg: 
      - "ping {{ item.private_ip }}"
      - "ssh -i {{ ssh_keypair_directory}}/{{ ssh_keypair_name }}.pem {{ ise_username }}@{{ item.private_ip }}"
      - "ping {{ item.name }}.{{ domain_name }}"
      - "ssh -i {{ ssh_keypair_directory}}/{{ ssh_keypair_name }}.pem {{ ise_username }}@{{ item.name }}.{{ domain_name }}"


...
